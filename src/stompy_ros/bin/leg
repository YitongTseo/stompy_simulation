#!/usr/bin/env python
"""
Connect to teensy. Protocol:
    To the teensy:
        <h/t/k><pwm value>\n
            where h/t/k is the joint and pwm value is +-1024
            the pwm value should observe both deadband (25%) and governer (40%)
            so values should range: -410, 256, 0, 256, 410
            + values will extend, - values will retract
    From the teensy:
        <h/t/k/c><string pot reading>\n
            where h/t/k/c is the sensor (c = compliant)
            and string pot reading is a 16 bit unsigned number

teensy must receive a command every 0.5 seconds or it will timeout.
timeout sets all pwm to 0

Connect to ros using:
    - Heartbeat client
    - publishing string pot values:
        topic = /<leg>/<joint>, int32
    - publishing pwm values [for logging]:
        topic = /<leg>/<joint> int32
    - listening to joystick values
        map joystick to pwms (different for each leg)
        buttons can determine if a single leg is 'active'
            x (+left) = extend knee
            y (+up) = extend thigh
            z (+cw) = extend/retract knee [per leg]
"""

import glob
import os
import socket
import threading
import time

import serial

import heartbeat
import rospy
import sensor_msgs.msg
import std_msgs.msg

valid_hosts = ('fr', 'fl', 'mr', 'ml', 'rr', 'rl')

if 'LEG_NAME' in os.environ:
    leg_name = os.environ['LEG_NAME']
else:
    leg_name = socket.gethostname()
if leg_name not in valid_hosts:
    leg_name = 'fr'
    fake_teensy = True
else:
    fake_teensy = False
if os.environ.get('FAKE_TEENSY', False):
    fake_teensy = True
monitor_delay = 0.01  # seconds to wait if no bytes to read
if fake_teensy:
    print("Faking teensy connection...")
    send_period = 2.5  # ms between pwm updates
else:
    print("Using a real teensy connection")
    send_period = 0.25
#pwm_min = 256  # sets valve deadband
pwm_min = 128  # sets valve deadband
pwm_max = 410  # sets valve max
joystick_min = 0.05  # sets joystick deadband

# index of button that should be pressed when issuing commands to just this leg
button_indices = {
    'fr': 4,
    'fl': 5,
    'mr': 6,
    'ml': 7,
    'rr': 8,
    'rl': 9,
}
button_index = button_indices[leg_name]
hip_flips = {
    'fr': 1,
    'fl': -1,
    'mr': 1,
    'ml': -1,
    'rr': 1,
    'rl': -1,
}
axis_map = {
    'hip': {
        'axis': 2,
        'flip': hip_flips[leg_name],
        'jmin': joystick_min,
        'pmin': pwm_min,
        'pmax': pwm_max,
    },
    'thigh': {
        'axis': 1,
        'flip': 1,
        'jmin': joystick_min,
        'pmin': pwm_min,
        'pmax': pwm_max,
    },
    'knee': {
        'axis': 0,
        'flip': 1,
        'jmin': joystick_min,
        'pmin': pwm_min,
        'pmax': pwm_max,
    },
}


joint_codes = {'H': 'hip', 'T': 'thigh', 'K': 'knee', 'C': 'calf'}
current_codes = {'h': 'hip', 't': 'thigh', 'k': 'knee'}
reverse_joint_codes = {joint_codes[k]: k for k in joint_codes}
reverse_current_codes = {current_codes[k]: k for k in current_codes}

joint_current_pubs = {'hip': None, 'thigh': None, 'knee': None}
joint_sensor_pubs = {'hip': None, 'thigh': None, 'knee': None, 'calf': None}
joint_pwm_pubs = {'hip': None, 'thigh': None, 'knee': None}
pwms = {'hip': 0, 'thigh': 0, 'knee': 0}
last_pwms_time = None
conn = None
lock = threading.Lock()
heart = None


def calculate_pwms(axes):
    global pwms
    for j in axis_map:
        m = axis_map[j]
        a = axes[m['axis']] * m.get('flip', 1)
        # if joystick is in it's deadband, do nothing
        if abs(a) < m['jmin']:
            pwms[j] = 0.
            continue
        # compute pwm range
        pscale = (m['pmax'] - m['pmin']) / (1. - m['jmin'])
        if a > 0:
            pwms[j] = int((a - m['jmin']) * pscale + m['pmin'])
        else:
            pwms[j] = int((a + m['jmin']) * pscale - m['pmin'])


def publish_pwms():
    global pwms
    for j in pwms:
        p = joint_pwm_pubs[j]
        p.publish(pwms[j])


def write_pwms():
    global conn, lock, pwms, last_pwms_time
    for p in pwms:
        code = reverse_joint_codes[p]
        value = pwms[p]
        if fake_teensy:
            print("%s%i" % (code, value))
        else:
            lock.acquire()
            conn.write('%s%i\n' % (code, value))
            lock.release()
    last_pwms_time = time.time()


def zero_pwms(write=False):
    global pwms
    pwms = {'hip': 0, 'thigh': 0, 'knee': 0}
    if write:
        write_pwms()


def new_joy(data):
    # check for 'deadman', if not pressed, send 0 pwms
    global pwms
    if data.buttons[1] == 0:
        print("Deadman is open!")
        zero_pwms()
    # check for 'me' button or no buttons
    elif any(data.buttons[2:]) and data.buttons[button_index] == 0:
        print(
            "Other button[%s] is pressed, doing nothing"
            % (data.buttons[1:], ))
        zero_pwms()
    else:
        # map data.axes to pwm
        calculate_pwms(data.axes)
    # publish pwm
    publish_pwms()
    # acquire teensy lock?
    # write new pwms to teensy
    print("writing pwms: %s" % (pwms, ))
    write_pwms()


def find_port(port):
    if port is not None:
        return port
    ports = glob.glob('/dev/ttyACM*')
    if len(ports) != 1:
        raise Exception("Failed to find port: %s" % (ports, ))
    return ports[0]


def connect_to_teensy(port=None):
    global conn
    if not fake_teensy:
        conn = serial.Serial(find_port(port), 115200)


def connect_to_ros():
    rospy.init_node(leg_name)
    global heart
    heart = heartbeat.ClientHeart(
        leg_name, rospy.get_param('/heartbeat/server'))
    # wait for first heartbeat
    while heart.check() is None:
        rospy.loginfo("waiting for first heartbeat")
        rospy.sleep(0.5)
    rospy.Subscriber('/joy', sensor_msgs.msg.Joy, new_joy)
    for j in joint_sensor_pubs:
        joint_sensor_pubs[j] = rospy.Publisher(
            '/%s/sensors/%s' % (leg_name, j), std_msgs.msg.Int32,
            queue_size=16)
    for j in joint_current_pubs:
        joint_current_pubs[j] = rospy.Publisher(
            '/%s/current/%s' % (leg_name, j), std_msgs.msg.Int32,
            queue_size=16)
    for j in joint_pwm_pubs:
        joint_pwm_pubs[j] = rospy.Publisher(
            '/%s/pwms/%s' % (leg_name, j), std_msgs.msg.Int32,
            queue_size=16)


def monitor_teensy():
    # monitor teensy, publish new pot messages when received
    global last_pwms_time, heart, conn, lock
    last_pwms_time = time.time()
    # TODO wait for first heartbeat
    while not rospy.is_shutdown():
        # check heart
        if not heart.check():
            rospy.logerr("Lost heartbeat, exiting...")
            zero_pwms(write=True)
            break
        if time.time() - last_pwms_time > send_period:
            # send pwms
            write_pwms()
        if fake_teensy:
            rospy.sleep(monitor_delay)
            continue
        lock.acquire()
        if conn.inWaiting():
            msg = conn.readline()
            lock.release()
            if len(msg) < 2:
                print("invalid message: %s" % (msg, ))
                continue
            if msg[0] in joint_codes:
                joint = joint_codes[msg[0]]
                try:
                    value = int(msg[1:])
                except ValueError:
                    print("failed to parse message: %s" % (msg, ))
                joint_sensor_pubs[joint].publish(value)
            elif msg[0] in current_codes:
                joint = current_codes[msg[0]]
                try:
                    value = int(msg[1:])
                except ValueError:
                    print("failed to parse message: %s" % (msg, ))
                joint_current_pubs[joint].publish(value)
            else:
                print("invalid messge: %s" % (msg, ))
                continue
        else:
            lock.release()
            rospy.sleep(monitor_delay)


if __name__ == '__main__':
    connect_to_teensy()
    connect_to_ros()
    monitor_teensy()
